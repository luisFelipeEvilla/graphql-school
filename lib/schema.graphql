"Validate levels types"
enum Level {
    begginner,
    intermediate,
    advanced
}

interface Person {
    _id: ID!,
    name: String!,
    email: String!
}

type Course {
    _id: ID!,
    title: String!,
    teacher: String,
    description: String!,
    topic: String,
    people: [Student],
    level: Level
}

type Student implements Person {
    _id: ID!,
    name: String!,
    email: String!
    avatar: String
}

type Monitor implements Person {
    _id: ID!,
    name: String!,
    email: String!,
    phone: String
}

input CourseInput {
    title: String!,
    teacher: String,
    description: String!,
    topic: String
}

input EditCourseInput {
    title: String,
    teacher: String,
    description: String,
    topic: String
}

input PersonInput {
    name: String!,
    email: String!,
    avatar: String,
    phone: String
}

input EditPersonInput {
    name: String,
    email: String,
    avatar: String,
    phone: String
}

type Query {
    "return all courses"
    getCourses: [Course]
    "return a course"
    getCourse(id: ID!): Course
    "return all students"
    getPersons: [Person]
    "return a Person"
    getPerson(id: ID!): Person
}

type Mutation {
    "Create a course" 
    createCourse(input: CourseInput!): Course
    "Edit a course"
    editCourse(id: ID!, input: EditCourseInput!): Course
    "Delete a Course"
    deleteCourse(id: ID!): Course
    "Add People to a course"
    addPeople(CourseID: ID!, PeopleID: ID!): Course
    "create a student"
    createPerson(input: PersonInput!): Person
    "Edit a Person"
    editPerson(id: ID!, input: EditPersonInput): Person
    "Delete a Person"
    deletePerson(id: ID!): Person
}
